#!/usr/bin/env python
# -*- coding: utf-8 -*-


class BaseMetataskOverrider(object):
    '''
        base class for overriding metatask template as an executable metatask for task generator.
        interface:
            override_all(**kargv): (abstract function. must be rewritten in subclass)
        useful functions:
            add_model(model): add model information into metatask.
                              model: the data structure is generated by BuildingTools.ScriptGenerator.SpecificBase
            add_dependency(names): add dependency filename into metatask.
                                    names: list of filenames

    '''

    def __init__(self, dictdata):
        print "BaseMetataskOverrider deprecated, please remove it and its dependencies!"
        self.input = dictdata

    def override_all(self, **kargv):
        pass

    def add_model(self, model):
        if self.input.get('building') is None:
            self.input['building'] = dict()
        for k in model['buildingInfo']:
            if self.input['taskGenerator']['arguments'].get('variable') == None:
                self.input['taskGenerator']['arguments']['variable'] = []
            if len(k['value']) == 1:
                self.add_model_to_constant(k)
            else:
                self.input['taskGenerator']['arguments']['variable'].append(k)

    def add_model_to_constant(self, item):
        constant = self.input['taskGenerator']['arguments']['constant']
        links = item['link'].split('.')
        temp = constant
        for l in links:
            if temp.get(l) == None:
                temp[l] = dict()
            temp = temp[l]
        temp[item['name']] = item['value'][0]

    def add_dependency(self, names):
        self.input['taskGenerator']['arguments']['constant']['dependency'].extend(names)
